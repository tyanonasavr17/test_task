continue
dish.ingredients.pluck(:name).exclude?("[]")
dish = Dish.all.last
Order.last
Order.count
@order.save
@order = Order.new(order_params)
order_params
continue
Order.count
Order.new(params.permit(excluded_ingredients: []))
params
params.permit(excluded_ingredients: [])
order_params
continue
@order.excluded_ingredients
@order = Order.new(order_params)
continue
@order = Order.new(order_params)
order_params
params
continue
params
next
renderer
previous_renderer
next
continue
n
ActionDispatch::ExceptionWrapper.status_code_for_exception(error.class.name)
n
continue
@dishes_without_ingredients
@dishes_without_ingredients.to_a.count
@dishes_without_ingredients.to_a
@dishes_without_ingredients.class
@dishes_without_ingredients.count
@dishes_without_ingredients
continue
@dishes_without_ingredients = Dish.includes(:ingredients).where.not(ingredients: { name: selected_ingredients }).distinct
@dishes_without_ingredients = Dish.includes(:ingredients).where.not(ingredients: { name: selected_ingredients })
@dishes_without_ingredients = Dish.includes(:ingredients)
params[:ingredients]
